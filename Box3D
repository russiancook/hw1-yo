
/**
* Write a description of class Box3D here.
*
* @author (your name)
* @version (a version number or a date)
*/
public class Box3D 
{
    // instance variables 
    private int _legnth;
    private int _width;
    private int _height;
    private Point3D _base;
    public final int DEFAULT_VALUE = 0;
    public final int DEFAULT_NEGATIVE_FIX = 1;
    
    public Box3D()
    {
        _base = new Point3D();
        _legnth = DEFAULT_VALUE ;
        _width = DEFAULT_VALUE ;
        _height = DEFAULT_VALUE ;
    }
      
    public Box3D(Point3D basePoint, int legnth, int width, int height )
    {
        _base = new Point3D(basePoint);
        _legnth = checkNegative(legnth);
        _width = checkNegative(width);
        _height = checkNegative(height);
    }
    
    public Box3D(Box3D otherBox)
    {
        // initialise instance variables
        _base = new Point3D(otherBox._base);
        _legnth = otherBox._legnth;
        _width =  otherBox._width;
        _height = otherBox._height;
        
    }
    
    private int checkNegative(int num )
    {
        if (num < DEFAULT_VALUE)
        {
            return DEFAULT_NEGATIVE_FIX;
        }
        return num;
    }
    
    public int getLegnth()
    {
        return _legnth;
    }
    
    public int getWidth()
    {
        return _width;
    }
    
    public int getHeight()
    {
        return _height;
    }
    
    public Point3D getBase()
    {
        return new Point3D(_base);
    }
    
    public void setLegnth(int num)
    {
        if (num > 0)
            _legnth = num;
    }
    
    public void setWidth(int num)
    {
        if (num > 0)
            _width = num;
    }
    
    public void setHeight(int num)
    {
        if (num > 0)
            _height = num;
    }
    
    public void setBase (Point3D p)
    {
        _base = new Point3D(p);
    }
    
    public String toString()
    {
        return "The base point is ("+ _base + "),length=" + _legnth +",width=" + _width +
        ",height=" + _height;
    }

    public boolean equals(Box3D other)
    {
        if (_base.equals(other._base)  && other._height == _height && other._legnth == _legnth && 
        other._width == _width)
        {
            return true;
        }
        return false;
    }   
    
    public Box3D move(double dx, double dy, double dz)
    {
        Point3D newPoint = new Point3D(dx,dy,dz);
        Box3D newBox = new Box3D(newPoint, _legnth, _width, _height);
        return newBox;
    }
    
    public Point3D getUpRightBackPoint()
    {
        Point3D newPoint = new Point3D(_base);
        //moving by width and height and backward in the length 
        newPoint.move(-(double)_legnth, (double)_width, (double)_height);
        return newPoint;
    }
    
    private double getMiddle(double x1, double x2)
    {
        return (x1 + x2) / 2;
    }
    
    public Point3D getCenter()
    {
        double middleX, middleY, middleZ;
        Point3D farPoint = new Point3D (getUpRightBackPoint());
        middleX = getMiddle(_base.getX() ,farPoint.getX());
        middleY = getMiddle(_base.getY() ,farPoint.getY());
        middleZ = getMiddle(_base.getZ() ,farPoint.getZ());
        Point3D middlePoint = new Point3D (middleX, middleY, middleZ);
        return middlePoint;
    }
    
    public double distance(Box3D other)
    {
        Point3D currentCenter = new Point3D (getCenter());
        Point3D otherCenter = new Point3D (other.getCenter());
        return currentCenter.distance(otherCenter);
    }
    
    public int getVolume()
    {
        return _legnth * _width * _height;
    }   
    
    public int getSurface()
    {
        int surface;
        surface = _legnth * _width * 2 + _legnth * _height * 2 + _height * _width * 2;
        return surface;
    }
    
    public boolean isLargerCapacity(Box3D other)
    {
        if (getVolume() > other.getVolume())
            return true;
        return false;
    }
    
    public boolean contains(Box3D other)
    {
        if (isLargerCapacity(other) && _legnth > other._legnth && 
        _width > other._width && _height > other._height)
            return true;
        return false;
    }
    
    public boolean isAbove(Box3D other)
    {
        Point3D newPoint = new Point3D(other.getUpRightBackPoint());
        if (_base.isAbove(newPoint))
            return true;
        return false;
    }
    

}

